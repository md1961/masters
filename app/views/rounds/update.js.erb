var animate_distance = function(element, d_start, d_end, t_interval1, t_interval2) {
  var is_second_stage = t_interval2 === void 0;
  var d1 = d_end + (is_second_stage ? 0 : 4 + random_1_to(6));
  var d = d_start;
  var timer = setInterval(function() {
    d--;
    if (d >= 0) {
      element.text(d);
    }
    if (d <= d1) {
      if (t_interval2 > 0) {
        animate_distance(element, d, d_end, t_interval2);
      } else if (is_second_stage) {
        displayDelayed();
      }
      if (element.text() == '0') {
        element.text('IN!');
      }
      clearInterval(timer);
    }
  }, t_interval1);
};

var displayDelayed = function() {
  setTimeout(function() {
    $('tr#message').hide();
    $('tr.delayed_display').show();
    $('input[type="submit"]').prop('disabled', false);
    updateTables();
  }, parseInt($('tr#message').attr('data-time_to_delay')));
};

var random_1_to = function(n_max) {
  return Math.floor(Math.random() * n_max) + 1;
}

$('table#result tr').remove();
$('table#result').append($("<%= j render 'result' %>"));

if (!$('tr#message')[0]) {
  updateTables();
} else {
  $('input[type="submit"]').prop('disabled', true);
  if (!$('span#distance_amination')[0]) {
    displayDelayed();
  } else {
    var display = $('span#distance_amination');
    var result = display.attr('data-result');
    result = result == 'OK' ? random_1_to(2) : parseInt(result) || 0;
    var distance = parseInt(display.text());
    var message = display.attr('data-message');
    var preMessages = display.attr('data-pre_messages');
    preMessages = preMessages.length == 0 ? [] : preMessages.split(';');
    var displayPreMessages = function(preMessages) {
      if (preMessages.length == 0) {
        if (message.length > 0) {
          display.text(message);
          displayDelayed();
        } else {
          animate_distance(display, distance, result, 50, 200);
        }
        return;
      }
      display.text(preMessages.shift());
      setTimeout(function() {
        displayPreMessages(preMessages);
      }, 2000);
    };
    displayPreMessages(preMessages);
  }
}


function updateTables() {

var table_players_info = $('div#players_info table:first');

<% group = @round.group_to_display
   selector = "div#players_info table tr.group_info#{group.number}" -%>
$("<%= selector %>:first").remove();
$("<%= selector %>").replaceWith($("<%= j render partial: 'players_info_by_group',
                                            locals: {group: group, not_to_display: false} %>"));

var current_group_number_in_display = parseInt($('div#players_info table td.current').attr('data-group_number'));
if (<%= group.number %> !== current_group_number_in_display) {
  var td_group_number = $('div#players_info table td.current');
  td_group_number.toggleClass('current');
  var tr_next_group = td_group_number.parent().next().next();
  tr_next_group.children('td:first').toggleClass('current');

  <% if group.number == 1 -%>
    var tr_count = 0;
    while (true) {
      var td_group_number = table_players_info.find('td').first();
      if (td_group_number.attr('data-group_number') === '1') {
        break;
      }
      for (var i = 0; i < 2; i++) {
        table_players_info.find('tr').first().toggleClass('not_to_display').remove().appendTo(table_players_info);
        tr_count++;
      }
    }
    for (var i = 0; i < tr_count; i++) {
      table_players_info.find('tr.not_to_display').first().toggleClass('not_to_display');
    }
  <% elsif group.number > num_groups_in_players_info - offset_from_bottom_of_to_display_in_players_info -%>
    for (var i = 0; i < 2; i++) {
      table_players_info.find('tr').first().toggleClass('not_to_display').remove().appendTo(table_players_info);
    }
    for (var i = 0; i < 2; i++) {
      table_players_info.find('tr.not_to_display').first().toggleClass('not_to_display');
    }
  <% end -%>

  $("div#score_cards span.toggle_score_card_display.current"                 ).toggleClass('current');
  $("div#score_cards span.toggle_score_card_display.group<%= group.number %>").toggleClass('current');
  $("div#score_cards table.score_card").hide();
  <% if @style.present? -%>
    $("div#score_cards table.score_card.group<%= group.number %>").show();
  <% end -%>
}

$('div#hole_map').children('table').remove();
$('div#hole_map').append($("<%= j render group.players.first.shot.hole %>"));

<% group = @round.current_group -%>
<% if group.all_holed_out? -%>
  $('table#leaders').replaceWith($("<%= j render 'leaders' %>"));

  <% group.players.each do |player| -%>
    <% hole = player.shot.hole
       stroke = player.ball.shot_count -%>
    var table_score_card = $("table#score_player<%= player.id %>");
    var td_stroke = table_score_card.find("td.stroke.hole<%= hole.number %>");
    td_stroke.text(<%= stroke %>);
    td_stroke.addClass("<%= class_score_result(stroke, hole) %>");

    <% next if stroke == hole.par -%>

    var td_score = table_score_card.find("td.score.hole<%= hole.number %>");
    var cum_score = 0;
    var td = td_score;
    while (true) {
      td = td.prev();
      if (!td) {
        break;
      }
      var text = td.text();
      var n = parseInt(text);
      if (!isNaN(n) || text.match(/E/)) {
        cum_score = n || 0;
        break;
      }
    }
    cum_score += <%= stroke - hole.par %>;
    td_score.text(cum_score > 0 ? '+' + cum_score : cum_score == 0 ? 'E' : cum_score);
  <% end -%>
<% end -%>

}
