var animateDistance = function(element, dStart, dEnd, tInterval1, tInterval2) {
  console.log('animateDistance() called w/ dStart: ' + dStart + ', dEnd: ' + dEnd
      + ', tInterval1: ' + tInterval1+ ', tInterval2: ' + tInterval2);
  var isSecondStage = tInterval2 === void 0;
  var textEnd = null;
  if (!isSecondStage && typeof dEnd == 'string') {
    isSecondStage = true;
    textEnd = dEnd;
    dStart = -dStart;
    dEnd = dStart - randomBetween(5, 10);
    tInterval1 = tInterval2;
  } else if (isSecondStage
             && 0 < dEnd && dEnd <= randomBetween(11, 20)
             && randomBetween(1, 10) <= 7) {
    dEnd = -dEnd;
  }
  var dPass = null;
  if (dStart > 1 && dEnd < -1) {
    var dAbsSmaller = Math.min(dStart, -dEnd);
    var dPassMin = Math.max(dAbsSmaller - 10, 1);
    dPass = randomBetween(dPassMin, dAbsSmaller - 1);
    console.log('animateDistance(): dPass = ' + dPass + ', Start: ' + dStart + ', dEnd: ' + dEnd);
  }
  var d1 = dEnd + (isSecondStage ? 0 : randomBetween(5, 10));
  if (d1 > dStart) { d1 = dStart; }
  var d = dStart;
  var timer = setInterval(function() {
    d--;
    if (dPass && d == dPass) {
      d = -d;
    } else if (d == 0 && dEnd != 0) {
      d--;
    }
    if (d >= dEnd) {
      element.text(Math.abs(d));
    }
    if (d <= d1) {
      if (!isSecondStage) {
        animateDistance(element, d, textEnd || dEnd, tInterval2);
      } else {
        displayDelayed();
        if (element.text() == '0') {
          element.text('IN!');
        } else if (textEnd) {
          element.text(textEnd);
        }
      }
      clearInterval(timer);
    }
  }, tInterval1);
};

var displayDelayed = function() {
  setTimeout(function() {
    $('tr#message').hide();
    $('tr.delayed_display').show();
    $('input[type="submit"]').prop('disabled', false);
    updateTables();
  }, $('tr#message').data('time_to_delay'));
};

var randomBetween = function(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

var radiosForShotOption = $('div#radio_buttons_for_shot_option');
if (radiosForShotOption[0]) {
  radiosForShotOption.remove();
}

$('table#result tr').remove();
$('table#result').append($("<%= j render 'result' %>"));

if (<%= @round.needs_input? %>) {
  $('form#form_to_proceed').prepend($("<%= j render 'shot_option' %>"));
} else if (!$('tr#message')[0]) {
  updateTables();
} else {
  $('input[type="submit"]').prop('disabled', true);
  if (!$('span#distance_amination')[0]) {
    displayDelayed();
  } else {
    var display = $('span#distance_amination');
    var result = display.attr('data-result');
    result = result == 'IN' ? 0 : parseInt(result) || result;
    var distance = parseInt(display.text());
    var message = display.attr('data-message');
    var preMessages = display.attr('data-pre_messages');
    preMessages = preMessages.length == 0 ? [] : preMessages.split(';');
    var displayPreMessages = function(preMessages) {
      if (preMessages.length == 0) {
        if (message.length > 0) {
          display.text(message);
          displayDelayed();
        } else {
          animateDistance(display, distance, result, 50, 200);
        }
        return;
      }
      var preMessageAndTimeout = preMessages.shift().split('@');
      var preMessage = preMessageAndTimeout[0];
      var timeOut = parseInt(preMessageAndTimeout[1]) || $('tr#message').data('time_to_delay');
      display.text(preMessage);
      setTimeout(function() {
        displayPreMessages(preMessages);
      }, timeOut);
    };
    displayPreMessages(preMessages);
  }
}


function updateTables() {

<% if group = @round.group_to_display -%>
console.log('group_to_display = ' + "<%= group %>");

var tablePlayersInfo = $('div#players_info table:first');

var updatePlayersInfoByReplacingGroup = function(groupNumber, htmlGroup) {
  var trGroup = $('div#players_info table tr.group_info' + groupNumber);
  var wasHidden = trGroup.hasClass('not_to_display');
  trGroup.first().nextAll('tr.group_info' + groupNumber).remove();
  if (wasHidden) {
    htmlGroup.addClass('not_to_display');
  } else {
    htmlGroup.removeClass('not_to_display');
  }
  trGroup.replaceWith(htmlGroup);
};

<% unless @round.playoff? -%>
  var currentGroupNumberInDisplay = $('div#players_info table td.current').data('group_number');
  console.log('currentGroupNumberInDisplay = ' + currentGroupNumberInDisplay);
  if (<%= group.number %> !== currentGroupNumberInDisplay) {
    <% prev_group = group.prev_just_played -%>
    updatePlayersInfoByReplacingGroup(
      <%= prev_group.number %>,
      $("<%= j render partial: 'players_info_by_group', locals: {group: prev_group, not_to_display: false} %>")
    );
    $('<%= "div#players_info table tr.group_info#{prev_group.number} td:first" %>').removeClass('finished_play');

    <% if group == @round.first_group_playing -%>
      var trCount = 0;
      while (true) {
        var tdGroupNumber = tablePlayersInfo.find('td').first();
        <% group_number_at_top = [
              1,
              group.number - (num_groups_in_players_info - offset_from_bottom_of_to_display_in_players_info - 1)
            ].max -%>
        if (tdGroupNumber.data('group_number') === <%= group_number_at_top %>) {
          break;
        }
        for (var i = 0; i < 2; i++) {
          tablePlayersInfo.find('tr').first().addClass('not_to_display').remove().appendTo(tablePlayersInfo);
          trCount++;
        }
      }
      var count = Math.min(trCount, <%= num_groups_in_players_info * 2 %>);
      for (var i = 0; i < count; i++) {
        tablePlayersInfo.find('tr.not_to_display').first().removeClass('not_to_display');
      }
    <% elsif group.number > num_groups_in_players_info - offset_from_bottom_of_to_display_in_players_info -%>
      for (var i = 0; i < 2; i++) {
        tablePlayersInfo.find('tr').first().addClass('not_to_display').remove().appendTo(tablePlayersInfo);
      }
      for (var i = 0; i < 2; i++) {
        tablePlayersInfo.find('tr.not_to_display').first().removeClass('not_to_display');
      }
    <% end -%>

    $("div#score_cards span.toggle_score_card_display.current"                 ).removeClass('current');
    $("div#score_cards span.toggle_score_card_display.group<%= group.number %>").addClass('current');
    $("div#score_cards table.score_card").hide();
    <% if @style.present? -%>
      $("div#score_cards table.score_card.group<%= group.number %>").show();
    <% end -%>
  }
<% end -%>

updatePlayersInfoByReplacingGroup(
  <%= group.number %>,
  $("<%= j render partial: 'players_info_by_group', locals: {group: group, not_to_display: false} %>")
);

$('div#hole_map').children('table').remove();
$('div#hole_map').append($("<%= j render group.players.first.shot.hole %>"));

<% unless @round.playoff? -%>
  $('table#leaders').replaceWith($("<%= j render 'leaders' %>"));

  <% current_group = @round.current_group -%>
  console.log('current_group = ' + "<%= current_group %>");
  <% if current_group.all_holed_out? -%>
    <% current_group.players.each do |player| -%>
      <% hole = player.shot.hole
         stroke = player.ball.shot_count -%>
      var tableScoreCard = $("table#score_player<%= player.id %>");

      tableScoreCard.children('caption').html("<%= full_name_with_score(player) %>");
      var tdStroke = tableScoreCard.find("td.stroke.hole<%= hole.number %>");
      tdStroke.text(<%= stroke %>);
      tdStroke.addClass("<%= class_score_result(stroke, hole) %>");

      <% score_card = player.score_cards.find_by(round: @round) -%>
      <% if hole.number == 9 -%>
        var tdTotalIn = tableScoreCard.find('td.stroke.total_in');
        tdTotalIn.text(<%= score_card.total_in %>);
      <% elsif hole.number == 18 -%>
        var tdTotalOut = tableScoreCard.find('td.stroke.total_out');
        tdTotalOut.text(<%= score_card.total_out %>);
        var tdTotalRound = tableScoreCard.find('td.stroke.total_round');
        tdTotalRound.text(<%= score_card.total_value %>);
      <% end -%>

      <% next if stroke == hole.par -%>

      var tdScore = tableScoreCard.find("td.score.hole<%= hole.number %>");
      var cumScore = 0;
      var td = tdScore;
      while (true) {
        td = td.prev();
        if (!td || td.length == 0) {
          break;
        }
        var text = td.text();
        var n = parseInt(text);
        if (!isNaN(n) || text.match(/E/)) {
          cumScore = n || 0;
          break;
        }
      }
      cumScore += <%= stroke - hole.par %>;
      tdScore.text(cumScore > 0 ? '+' + cumScore : cumScore == 0 ? 'E' : cumScore);
    <% end -%>
  <% end -%>
<% end -%>

<% end -%>

}
