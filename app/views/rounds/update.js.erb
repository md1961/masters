var animateDistance = function(element, dStart, dEnd, tInterval1, tInterval2) {
  var isSecondStage = tInterval2 === void 0;
  if (isSecondStage
      && 0 < dEnd && dEnd <= 10 + randomFrom1To(10)
      && randomFrom1To(10) <= 7) {
    dEnd = -dEnd;
  }
  var dPass = null;
  if (dStart > 1 && dEnd < -1) {
    dPass = randomFrom1To(Math.min(dStart, -dEnd) - 1);
  }
  var d1 = dEnd + (isSecondStage ? 0 : 4 + randomFrom1To(6));
  if (d1 > dStart) { d1 = dStart; }
  var d = dStart;
  var timer = setInterval(function() {
    d--;
    if (dPass && d == dPass) {
      d = -d;
    } else if (d == 0 && dEnd != 0) {
      d--;
    }
    if (d >= dEnd) {
      element.text(Math.abs(d));
    }
    if (d <= d1) {
      if (tInterval2 > 0) {
        animateDistance(element, d, dEnd, tInterval2);
      } else if (isSecondStage) {
        displayDelayed();
      }
      if (element.text() == '0') {
        element.text('IN!');
      }
      clearInterval(timer);
    }
  }, tInterval1);
};

var displayDelayed = function() {
  setTimeout(function() {
    $('tr#message').hide();
    $('tr.delayed_display').show();
    $('input[type="submit"]').prop('disabled', false);
    updateTables();
  }, parseInt($('tr#message').attr('data-time_to_delay')));
};

var randomFrom1To = function(nMax) {
  return Math.floor(Math.random() * nMax) + 1;
}

var radiosForShotOption = $('div#radio_buttons_for_shot_option');
if (radiosForShotOption[0]) {
  radiosForShotOption.remove();
}

$('table#result tr').remove();
$('table#result').append($("<%= j render 'result' %>"));

if (<%= @round.needs_input? %>) {
  $('form#form_to_proceed').prepend($("<%= j render 'shot_option' %>"));
} else if (!$('tr#message')[0]) {
  updateTables();
} else {
  $('input[type="submit"]').prop('disabled', true);
  if (!$('span#distance_amination')[0]) {
    displayDelayed();
  } else {
    var display = $('span#distance_amination');
    var result = display.attr('data-result');
    result = result == 'OK' ? randomFrom1To(2) : parseInt(result) || 0;
    var distance = parseInt(display.text());
    var message = display.attr('data-message');
    var preMessages = display.attr('data-pre_messages');
    preMessages = preMessages.length == 0 ? [] : preMessages.split(';');
    var displayPreMessages = function(preMessages) {
      if (preMessages.length == 0) {
        if (message.length > 0) {
          display.text(message);
          displayDelayed();
        } else {
          animateDistance(display, distance, result, 50, 200);
        }
        return;
      }
      display.text(preMessages.shift());
      setTimeout(function() {
        displayPreMessages(preMessages);
      }, 2000);
    };
    displayPreMessages(preMessages);
  }
}


function updateTables() {

var tablePlayersInfo = $('div#players_info table:first');

var updatePlayersInfoByReplacingGroup = function(groupNumber, htmlGroup) {
  var trGroup = $('div#players_info table tr.group_info' + groupNumber);
  var wasHidden = trGroup.hasClass('not_to_display');
  trGroup.first().remove();
  if (wasHidden) {
    htmlGroup.addClass('not_to_display');
  } else {
    htmlGroup.removeClass('not_to_display');
  }
  trGroup.replaceWith(htmlGroup);
};

<% group = @round.group_to_display -%>

updatePlayersInfoByReplacingGroup(
  <%= group.number %>,
  $("<%= j render partial: 'players_info_by_group', locals: {group: group, not_to_display: false} %>")
);

var currentGroupNumberInDisplay = parseInt($('div#players_info table td.current').attr('data-group_number'));
if (<%= group.number %> !== currentGroupNumberInDisplay) {
  <% prev_group = group.prev_playing -%>
  updatePlayersInfoByReplacingGroup(
    <%= prev_group.number %>,
    $("<%= j render partial: 'players_info_by_group', locals: {group: prev_group, not_to_display: false} %>")
  );
  $('<%= "div#players_info table tr.group_info#{prev_group.number} td:first" %>').removeClass('finished_play');

  <% if group == @round.first_group_playing -%>
    var trCount = 0;
    while (true) {
      var tdGroupNumber = tablePlayersInfo.find('td').first();
      <% group_number_at_top = [
            1,
            group.number - (num_groups_in_players_info - offset_from_bottom_of_to_display_in_players_info - 1)
          ].max -%>
      if (tdGroupNumber.attr('data-group_number') === '<%= group_number_at_top %>') {
        break;
      }
      for (var i = 0; i < 2; i++) {
        tablePlayersInfo.find('tr').first().addClass('not_to_display').remove().appendTo(tablePlayersInfo);
        trCount++;
      }
    }
    for (var i = 0; i < trCount; i++) {
      tablePlayersInfo.find('tr.not_to_display').first().removeClass('not_to_display');
    }
  <% elsif group.number > num_groups_in_players_info - offset_from_bottom_of_to_display_in_players_info -%>
    for (var i = 0; i < 2; i++) {
      tablePlayersInfo.find('tr').first().addClass('not_to_display').remove().appendTo(tablePlayersInfo);
    }
    for (var i = 0; i < 2; i++) {
      tablePlayersInfo.find('tr.not_to_display').first().removeClass('not_to_display');
    }
  <% end -%>

  $("div#score_cards span.toggle_score_card_display.current"                 ).removeClass('current');
  $("div#score_cards span.toggle_score_card_display.group<%= group.number %>").addClass('current');
  $("div#score_cards table.score_card").hide();
  <% if @style.present? -%>
    $("div#score_cards table.score_card.group<%= group.number %>").show();
  <% end -%>
}

$('div#hole_map').children('table').remove();
$('div#hole_map').append($("<%= j render group.players.first.shot.hole %>"));

<% group = @round.current_group -%>
<% if group.all_holed_out? -%>
  $('table#leaders').replaceWith($("<%= j render 'leaders' %>"));

  <% group.players.each do |player| -%>
    <% hole = player.shot.hole
       stroke = player.ball.shot_count -%>
    var tableScoreCard = $("table#score_player<%= player.id %>");
    var tdStroke = tableScoreCard.find("td.stroke.hole<%= hole.number %>");
    tdStroke.text(<%= stroke %>);
    tdStroke.addClass("<%= class_score_result(stroke, hole) %>");

    <% next if stroke == hole.par -%>

    var tdScore = tableScoreCard.find("td.score.hole<%= hole.number %>");
    var cumScore = 0;
    var td = tdScore;
    while (true) {
      td = td.prev();
      if (!td) {
        break;
      }
      var text = td.text();
      var n = parseInt(text);
      if (!isNaN(n) || text.match(/E/)) {
        cumScore = n || 0;
        break;
      }
    }
    cumScore += <%= stroke - hole.par %>;
    tdScore.text(cumScore > 0 ? '+' + cumScore : cumScore == 0 ? 'E' : cumScore);
  <% end -%>
<% end -%>

}
